Importing the class from the module:
	>>> bg = __import__('7-base_geometry').BaseGeometry

Checking for module docstring:
	>>> mod =__import__('7-base_geometry').__doc__
	>>> len(mod) > 1
	True

Checking for class docstring:
	>>> c = __import__('7-base_geometry').BaseGeometry.__doc__
	>>> len(c) > 1
	True

Checking for area failure:
	>>> obj = bg()
	>>> obj.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

Checking too many arguments for area:
	>>> obj.area(50)
	Traceback (most recent call last):
        ...
	TypeError: area() takes 1 positional argument but 2 were given

Checking integer validator for passing integer:
	>>> obj.integer_validator("integer", 5)

Checking for integer == 0:
	>>> obj.integer_validator("integer", 0)
	Traceback (most recent call last):
        ...
        ValueError: integer must be greater than 0

Checking for integer < 0;
	>>> obj.integer_validator("integer", -1)
	Traceback (most recent call last):
        ...
        ValueError: integer must be greater than 0

Checking for non-integer types:
	>>> obj.integer_validator("None", None)
	Traceback (most recent call last):
	...
	TypeError: None must be an integer
	>>> obj.integer_validator("bool", True)
	Traceback (most recent call last):
        ...
        TypeError: bool must be an integer
	>>> obj.integer_validator("float", 3.4)
        Traceback (most recent call last):
        ...
        TypeError: float must be an integer
	>>> obj.integer_validator("complex", complex(2, 1))
        Traceback (most recent call last):
        ...
        TypeError: complex must be an integer
	>>> obj.integer_validator("string", "Sahar")
        Traceback (most recent call last):
        ...
        TypeError: string must be an integer
	>>> obj.integer_validator("tuple", (6, 0))
        Traceback (most recent call last):
        ...
        TypeError: tuple must be an integer
	>>> obj.integer_validator("list", [1, 2, 3])
	Traceback (most recent call last):
        ...
        TypeError: list must be an integer
	>>> obj.integer_validator("dict", {"key": "value"})
        Traceback (most recent call last):
        ...
        TypeError: dict must be an integer
	>>> obj.integer_validator("set", {"Sahar", "Mohamed", "hello"})
        Traceback (most recent call last):
        ...
        TypeError: set must be an integer
	>>> obj.integer_validator("frozenset", frozenset(["Sahar", "Mohamed"]))
        Traceback (most recent call last):
        ...
        TypeError: frozenset must be an integer
	>>> obj.integer_validator("bytes", b"bytes")
        Traceback (most recent call last):
        ...
        TypeError: bytes must be an integer
	>>> obj.integer_validator("bytearrays", bytearray(b"bytes"))
        Traceback (most recent call last):
        ...
        TypeError: bytearrays must be an integer

Checking for no arguments to integer_validator:
	>>> obj.integer_validator()
	Traceback (most recent call last):
        ...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for only 1 argument to integer_validator:
	>>> obj.integer_validator("integer")
	Traceback (most recent call last):
        ...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

Checking for too many arguments:
	>>> obj.integer_validator("integer", 3, "anything")
	Traceback (most recent call last):
        ...
	TypeError: integer_validator() takes 3 positional arguments but 4 were given
