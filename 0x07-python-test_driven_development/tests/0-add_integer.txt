===================================
Test cases for 0-add_integer module
===================================

The module defines a function to add 2 integer numbers ``add_integer(a, b=98)``

Usage
=====

Importing function from the module:
	>>> add_integer = __import__('0-add_integer').add_integer

Adding two positive integers (a = 3 and b = 5):
	>>> add_integer(3, 5)
	8

Adding negative integer and positive integer (a = -2 and b = 6):
	>>> add_integer(-2, 6)
	4

Adding two negative integers (a = -4 and b = -7):
	>>> add_integer(-4, -7)
	-11

Adding one integer and the default value for the other (a = 1 and b = 98)
	>>> add_integer(1)
	99

Adding positive float and integer (a = 4.3 and b = 8)
	>>> add_integer(4.3, 8)
	12

Adding a float and an integer where the integer is equal to the default value of b (a = 2.5 and b = 98)
	>>> add_integer(2.5)
	100

Adding a positive float and a negative integer (a = 10.5 and b = -2)
	>>> add_integer(10.5, -2)
	8

Adding negative float and integer (a = -10.5 and b = -2)
	>>> add_integer(-10.5, -2)
	-12

Adding two float numbers (a = 1.2 and b = 4.2)
        >>> add_integer(1.2, 4.2)
        5

Adding an integer number and a string (a = 4 and b = "School")
	>>> add_integer(4, "School")
	Traceback (most recent call last):
	      ...
	TypeError: b must be an integer

Passing no argument to the function
	>>> add_integer(None)
	Traceback (most recent call last):
	      ...
	TypeError: a must be an integer

Adding a letter and a number (a = 'c' and b = 1)
	>>> add_integer('c', 1)
	Traceback (most recent call last):
	      ...
	TypeError: a must be an integer

Adding two letters (a = 'c' and b = 'm')
	>>> add_integer('c', 'm')
	Traceback (most recent call last):
	      ...
	TypeError: a must be an integer

Adding a tuple
	>>> add_integer((1, 1))
	Traceback (most recent call last):
	      ...
	TypeError: a must be an integer

Adding a number and a list
	>>> add_integer(123, [])
	Traceback (most recent call last):
	      ...
	TypeError: b must be an integer

Passing a only one string
	>>> add_integer("Hello")
	Traceback (most recent call last):
	      ...
	TypeError: a must be an integer

Case Overflow:
	>>> add_integer(float('inf'), 0)
	Traceback (most recent call last):
	      ...
	OverflowError: cannot convert float infinity to integer

Case Overflow 2:
	>>> add_integer(float('inf'), float('-inf'))
	Traceback (most recent call last):
	      ...
	OverflowError: cannot convert float infinity to integer

Case NaN 1:
	>>> add_integer(0, float('nan'))
	Traceback (most recent call last):
	      ...
	ValueError: cannot convert float NaN to integer

Case NaN 2:
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	      ...
	ValueError: cannot convert float NaN to integer
